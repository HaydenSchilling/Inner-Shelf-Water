for (i in 1:nrow(Bathy)){
if (Bathy$site[i] == "CapeByron") {
Bathy$Distance_Coast[i] = distm(c(153.58, -28.6), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "DiamondHead") {
Bathy$Distance_Coast[i] = distm(c(152.75, -31.8), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "EvansHead") {
Bathy$Distance_Coast[i] = distm(c(153.48, -29.0), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "NorthSolitary") {
Bathy$Distance_Coast[i] = distm(c(153.23, -30.0), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
}
# # variables to loop through
# vars = c("Temp", "Salt","GeoMn")# "NBSS.Slope",
# #sites to loop through
sites <- levels(mydata$site)
sites <- sites[c(1,3,4,2)]
### Biomass interpoLation and plots
pl <- list()
for (j in sites){
mydata2 <- mydata %>%
filter(site == j & is.na(Depth) == FALSE & is.na(Biomass)==FALSE) %>%
select(c(Distance_Coast, Depth, Biomass, cast_no, Temp))
# Get the max depth of each cast
Limits <- mydata2 %>%
group_by(cast_no) %>%
summarise(maxD = max(Depth),
minD = min(Depth),
Distance_Coast = Distance_Coast[1]) %>%
ungroup()
Limits2 <- tibble(maxD = c(150, 150),
minD = c(0, 0),
Distance_Coast = c(max(Limits$Distance_Coast), min(Limits$Distance_Coast)),
cast_no = c(max(Limits$cast_no), max(Limits$cast_no)))
Limits <- Limits[order(Limits$Distance_Coast),]
Limits <- rbind(Limits, Limits2)
Bathy2 <- filter(Bathy, site == j)
fit1 <- with(mydata2, akima::interp(x = Distance_Coast, y = -Depth, z = log10(Biomass), nx = 100, ny = 100))
fit2 <- with(mydata2, interp(x = Distance_Coast, y = -Depth, z = Temp, nx = 100, ny = 100))
df <- melt(fit1$z, na.rm = TRUE)
names(df) <- c("x", "y", "Biomass")
df$Distance_Coast <- fit1$x[df$x]
df$Depth <- fit1$y[df$y]
df2 <- melt(fit2$z, na.rm = TRUE)
names(df2) <- c("x", "y", "Temp")
df$Temp <- df2$Temp
pl[[j]] <- ggplot(data = df, mapping = aes(x = Distance_Coast, y = Depth, z = log10(Biomass))) +
geom_tile(aes(fill = log10(Biomass))) + ylab("Depth (m)") +
geom_contour(aes(x = Distance_Coast, y = Depth, z = Temp), colour = "grey10", binwidth = 0.25, size = 0.2) +
geom_contour(aes(x = Distance_Coast, y = Depth, z = Temp), colour = "grey10", binwidth = 1, size = 0.5) +
geom_text_contour(aes(x = Distance_Coast, y = Depth, z = Temp), breaks = seq(16, 25)) +
scale_fill_distiller(palette = "Spectral", direction = -1, limits = c(0.1,  0.45), oob = scales::squish) +
geom_line(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth), alpha = 0.5, size = 0.2) +
geom_point(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth, alpha = 0.5), size = 0.1, show.legend = FALSE) +
geom_ribbon(data= Bathy2, aes(x = Distance_Coast, ymax = Bathymetry, ymin=-200), inherit.aes = FALSE, fill = "grey60") +
geom_text(x = 12010, y = -185, label = paste0("Biomass at ", j[1]), stat = "identity", inherit.aes = FALSE, hjust = 0) +
theme_classic() +
theme(plot.margin = unit(c(0,0,0,0), "mm"),
axis.text  = element_text(colour="black")) +
xlab(element_blank()) +
scale_x_continuous(limits = c(12000, 48000), expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
guides(size = "none", shape = "none")
# + geom_polygon(data = Limits, mapping = aes(x = Distance_Coast, y = -maxD), inherit.aes = FALSE, colour = "white")
}
pl[[4]] <- pl[[4]] + xlab("Distance from Coastline")
pl[[1]] + pl[[2]] + pl[[3]] + pl[[4]] + plot_layout(ncol = 1, guides = 'collect')
### Abundance #  done
pl <- list()
for (j in sites){
mydata2 <- mydata %>%
filter(site == j & is.na(Depth) == FALSE & is.na(Abundance)==FALSE & is.finite(Abundance)==TRUE & Abundance > 0) %>%
select(c(Distance_Coast, Depth, Abundance, cast_no, Temp))
# Get the max depth of each cast
Limits <- mydata2 %>%
group_by(cast_no) %>%
summarise(maxD = max(Depth),
minD = min(Depth),
Distance_Coast = Distance_Coast[1]) %>%
ungroup()
Limits2 <- tibble(maxD = c(150, 150),
minD = c(0, 0),
Distance_Coast = c(max(Limits$Distance_Coast), min(Limits$Distance_Coast)),
cast_no = c(max(Limits$cast_no), max(Limits$cast_no)))
Limits <- Limits[order(Limits$Distance_Coast),]
Limits <- rbind(Limits, Limits2)
Bathy2 <- filter(Bathy, site == j)
fit1 <- with(mydata2, akima::interp(x = Distance_Coast, y = -Depth, z = log10(Abundance), nx = 100, ny = 100))
fit2 <- with(mydata2, interp(x = Distance_Coast, y = -Depth, z = Temp, nx = 100, ny = 100))
df <- melt(fit1$z, na.rm = TRUE)
names(df) <- c("x", "y", "Abundance")
df$Distance_Coast <- fit1$x[df$x]
df$Depth <- fit1$y[df$y]
df2 <- melt(fit2$z, na.rm = TRUE)
names(df2) <- c("x", "y", "Temp")
df$Temp <- df2$Temp
pl[[j]] <- ggplot(data = df, mapping = aes(x = Distance_Coast, y = Depth, z = log10(Abundance))) +
geom_tile(aes(fill = log10(Abundance))) + ylab("Depth (m)") +
geom_contour(aes(x = Distance_Coast, y = Depth, z = Temp), colour = "grey10", binwidth = 0.25, size = 0.2) +
geom_contour(aes(x = Distance_Coast, y = Depth, z = Temp), colour = "grey10", binwidth = 1, size = 0.5) +
geom_text_contour(aes(x = Distance_Coast, y = Depth, z = Temp), breaks = seq(16, 25)) +
scale_fill_distiller(palette = "Spectral", direction = -1, limits = c(0.45,  0.58), oob = scales::squish) +
geom_line(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth), alpha = 0.5, size = 0.2) +
geom_point(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth, alpha = 0.5), size = 0.1, show.legend = FALSE) +
geom_ribbon(data= Bathy2, aes(x = Distance_Coast, ymax = Bathymetry, ymin=-200), inherit.aes = FALSE, fill = "grey60") +
geom_text(x = 12010, y = -185, label = paste0("Abundance at ", j[1]), stat = "identity", inherit.aes = FALSE, hjust = 0) +
theme_classic() +
theme(plot.margin = unit(c(0,0,0,0), "mm"),
axis.text  = element_text(colour="black")) +
xlab(element_blank()) +
scale_x_continuous(limits = c(12000, 48000), expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
guides(size = "none", shape = "none")
# + geom_polygon(data = Limits, mapping = aes(x = Distance_Coast, y = -maxD), inherit.aes = FALSE, colour = "white")
}
pl[[4]] <- pl[[4]] + xlab("Distance from Coastline")
pl[[1]] + pl[[2]] + pl[[3]] + pl[[4]] + plot_layout(ncol = 1, guides = 'collect')
View(mydata2)
View(mydata)
log10(10000)
log10(100)
### Abundance #  done
pl <- list()
for (j in sites){
mydata2 <- mydata %>%
filter(site == j & is.na(Depth) == FALSE & is.na(Abundance)==FALSE & is.finite(Abundance)==TRUE & Abundance > 0) %>%
select(c(Distance_Coast, Depth, Abundance, cast_no, Temp))
# Get the max depth of each cast
Limits <- mydata2 %>%
group_by(cast_no) %>%
summarise(maxD = max(Depth),
minD = min(Depth),
Distance_Coast = Distance_Coast[1]) %>%
ungroup()
Limits2 <- tibble(maxD = c(150, 150),
minD = c(0, 0),
Distance_Coast = c(max(Limits$Distance_Coast), min(Limits$Distance_Coast)),
cast_no = c(max(Limits$cast_no), max(Limits$cast_no)))
Limits <- Limits[order(Limits$Distance_Coast),]
Limits <- rbind(Limits, Limits2)
Bathy2 <- filter(Bathy, site == j)
fit1 <- with(mydata2, akima::interp(x = Distance_Coast, y = -Depth, z = Abundance, nx = 100, ny = 100)) #z = log10(Abundance)
fit2 <- with(mydata2, interp(x = Distance_Coast, y = -Depth, z = Temp, nx = 100, ny = 100))
df <- melt(fit1$z, na.rm = TRUE)
names(df) <- c("x", "y", "Abundance")
df$Distance_Coast <- fit1$x[df$x]
df$Depth <- fit1$y[df$y]
df2 <- melt(fit2$z, na.rm = TRUE)
names(df2) <- c("x", "y", "Temp")
df$Temp <- df2$Temp
pl[[j]] <- ggplot(data = df, mapping = aes(x = Distance_Coast, y = Depth, z = log10(Abundance))) +
geom_tile(aes(fill = log10(Abundance))) + ylab("Depth (m)") +
geom_contour(aes(x = Distance_Coast, y = Depth, z = Temp), colour = "grey10", binwidth = 0.25, size = 0.2) +
geom_contour(aes(x = Distance_Coast, y = Depth, z = Temp), colour = "grey10", binwidth = 1, size = 0.5) +
geom_text_contour(aes(x = Distance_Coast, y = Depth, z = Temp), breaks = seq(16, 25)) +
scale_fill_distiller(palette = "Spectral", direction = -1, limits = c(0.45,  0.58), oob = scales::squish) +
geom_line(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth), alpha = 0.5, size = 0.2) +
geom_point(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth, alpha = 0.5), size = 0.1, show.legend = FALSE) +
geom_ribbon(data= Bathy2, aes(x = Distance_Coast, ymax = Bathymetry, ymin=-200), inherit.aes = FALSE, fill = "grey60") +
geom_text(x = 12010, y = -185, label = paste0("Abundance at ", j[1]), stat = "identity", inherit.aes = FALSE, hjust = 0) +
theme_classic() +
theme(plot.margin = unit(c(0,0,0,0), "mm"),
axis.text  = element_text(colour="black")) +
xlab(element_blank()) +
scale_x_continuous(limits = c(12000, 48000), expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
guides(size = "none", shape = "none")
# + geom_polygon(data = Limits, mapping = aes(x = Distance_Coast, y = -maxD), inherit.aes = FALSE, colour = "white")
}
pl[[4]] <- pl[[4]] + xlab("Distance from Coastline")
pl[[1]] + pl[[2]] + pl[[3]] + pl[[4]] + plot_layout(ncol = 1, guides = 'collect')
### Abundance #  done
pl <- list()
for (j in sites){
mydata2 <- mydata %>%
filter(site == j & is.na(Depth) == FALSE & is.na(Abundance)==FALSE & is.finite(Abundance)==TRUE & Abundance > 0) %>%
select(c(Distance_Coast, Depth, Abundance, cast_no, Temp))
# Get the max depth of each cast
Limits <- mydata2 %>%
group_by(cast_no) %>%
summarise(maxD = max(Depth),
minD = min(Depth),
Distance_Coast = Distance_Coast[1]) %>%
ungroup()
Limits2 <- tibble(maxD = c(150, 150),
minD = c(0, 0),
Distance_Coast = c(max(Limits$Distance_Coast), min(Limits$Distance_Coast)),
cast_no = c(max(Limits$cast_no), max(Limits$cast_no)))
Limits <- Limits[order(Limits$Distance_Coast),]
Limits <- rbind(Limits, Limits2)
Bathy2 <- filter(Bathy, site == j)
fit1 <- with(mydata2, akima::interp(x = Distance_Coast, y = -Depth, z = Abundance, nx = 100, ny = 100)) #z = log10(Abundance)
fit2 <- with(mydata2, interp(x = Distance_Coast, y = -Depth, z = Temp, nx = 100, ny = 100))
df <- melt(fit1$z, na.rm = TRUE)
names(df) <- c("x", "y", "Abundance")
df$Distance_Coast <- fit1$x[df$x]
df$Depth <- fit1$y[df$y]
df2 <- melt(fit2$z, na.rm = TRUE)
names(df2) <- c("x", "y", "Temp")
df$Temp <- df2$Temp
pl[[j]] <- ggplot(data = df, mapping = aes(x = Distance_Coast, y = Depth, z = log10(Abundance))) +
geom_tile(aes(fill = log10(Abundance))) + ylab("Depth (m)") +
geom_contour(aes(x = Distance_Coast, y = Depth, z = Temp), colour = "grey10", binwidth = 0.25, size = 0.2) +
geom_contour(aes(x = Distance_Coast, y = Depth, z = Temp), colour = "grey10", binwidth = 1, size = 0.5) +
geom_text_contour(aes(x = Distance_Coast, y = Depth, z = Temp), breaks = seq(16, 25)) +
scale_fill_distiller(palette = "Spectral", direction = -1 ) + #,limits = c(0.45,  0.58), oob = scales::squish
geom_line(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth), alpha = 0.5, size = 0.2) +
geom_point(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth, alpha = 0.5), size = 0.1, show.legend = FALSE) +
geom_ribbon(data= Bathy2, aes(x = Distance_Coast, ymax = Bathymetry, ymin=-200), inherit.aes = FALSE, fill = "grey60") +
geom_text(x = 12010, y = -185, label = paste0("Abundance at ", j[1]), stat = "identity", inherit.aes = FALSE, hjust = 0) +
theme_classic() +
theme(plot.margin = unit(c(0,0,0,0), "mm"),
axis.text  = element_text(colour="black")) +
xlab(element_blank()) +
scale_x_continuous(limits = c(12000, 48000), expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
guides(size = "none", shape = "none")
# + geom_polygon(data = Limits, mapping = aes(x = Distance_Coast, y = -maxD), inherit.aes = FALSE, colour = "white")
}
pl[[4]] <- pl[[4]] + xlab("Distance from Coastline")
pl[[1]] + pl[[2]] + pl[[3]] + pl[[4]] + plot_layout(ncol = 1, guides = 'collect')
ggsave(paste0('plots/zoop/Abundance_All','.png'), dpi = 600, height = 21, width = 18, units = "cm")
# Hovmoller Plots Chl_a for sites
#Load Packages
library(tidyverse)
library(lubridate)
library(ncdf4)
library(tidync)
# #inshore locations (15 km from shore):
#  # CB - -28.632 , 153.794
#  # EH - -29 , 153.637
#  # NS - -30 , 153.384
#  # DH - -31.75, 153.944
# sitesX$Latitude_Offshore <- c(-28.63176, -28.99976, -29.99975, -31.64973)
# sitesX$Longitude_Offshore <- c(154.0497, 153.8936, 153.6431, 154.2076)
# Open File to investigate data (not analyse)
mydata <- nc_open("Data/Chla_imos_download/IMOS_aggregation_20200324T025801Z.nc")
str(mydata)
# time units are chr "days since 1800-01-01 00:00:00.0"
nc_close(mydata)
# Now actually analyse data using tidync
mydata2 <- tidync("Data/Chla_imos_download/IMOS_aggregation_20200324T025801Z.nc")
mydata2
# Evans Head
# restrict to a thin latitude band to a certain distance offshore
EH <- tidync("Data/Chla_imos_download/IMOS_aggregation_20200324T025801Z.nc") %>%
hyper_filter(latitude = latitude > -29.1 & latitude < -28.9) %>%
hyper_filter(longitude = longitude < 154.15)
EH
# Make dataframe
EH_dat <- EH %>% hyper_tibble()
# set date/day of year
EH_dat$date <- as.Date(EH_dat$time, origin = "1800-01-01")
EH_dat$DAY_OF_YEAR <- yday(EH_dat$date)
summary(EH_dat$DAY_OF_YEAR)
EH_data <- EH_dat %>% group_by(longitude, DAY_OF_YEAR) %>% summarise(CHL_A = mean(chl_oc3, na.rm = TRUE))
EH_data$Site <- "Evans Head"
head(EH_data)
# repeat forother sites
# Cape Byron
CB <- tidync("Data/Chla_imos_download/IMOS_aggregation_20200324T025801Z.nc") %>%
hyper_filter(latitude = latitude > -28.7 & latitude < -28.5) %>%
hyper_filter(longitude = longitude < 154.15)
CB
CB_dat <- CB %>% hyper_tibble()
CB_dat$date <- as.Date(CB_dat$time, origin = "1800-01-01")
CB_dat$DAY_OF_YEAR <- yday(CB_dat$date)
summary(CB_dat$DAY_OF_YEAR)
CB_data <- CB_dat %>% group_by(longitude, DAY_OF_YEAR) %>% summarise(CHL_A = mean(chl_oc3, na.rm = TRUE))
CB_data$Site <- "Cape Byron"
head(CB_data)
# North Solitary
NS <- tidync("Data/Chla_imos_download/IMOS_aggregation_20200324T025801Z.nc") %>%
hyper_filter(latitude = latitude > -30.1 & latitude < -29.9) %>%
hyper_filter(longitude = longitude < 154.15 & longitude >153)
NS
NS_dat <- NS %>% hyper_tibble()
NS_dat$date <- as.Date(NS_dat$time, origin = "1800-01-01")
NS_dat$DAY_OF_YEAR <- yday(NS_dat$date)
summary(NS_dat$DAY_OF_YEAR)
NS_data <- NS_dat %>% group_by(longitude, DAY_OF_YEAR) %>% summarise(CHL_A = mean(chl_oc3, na.rm = TRUE))
NS_data$Site <- "North Solitary"
head(NS_data)
# Diamond Head
DH <- tidync("Data/Chla_imos_download/IMOS_aggregation_20200324T025801Z.nc") %>%
hyper_filter(latitude = latitude > -31.85 & latitude < -31.65) %>%
hyper_filter(longitude = longitude < 154.15)
DH
DH_dat <- DH %>% hyper_tibble()
DH_dat$date <- as.Date(DH_dat$time, origin = "1800-01-01")
DH_dat$DAY_OF_YEAR <- yday(DH_dat$date)
summary(DH_dat$DAY_OF_YEAR)
DH_data <- DH_dat %>% group_by(longitude, DAY_OF_YEAR) %>% summarise(CHL_A = mean(chl_oc3, na.rm = TRUE))
DH_data$Site <- "Diamond Head"
head(DH_data)
# Combine sites
full_dat <- bind_rows(CB_data, EH_data, NS_data, DH_data)
full_dat$Site <- factor(full_dat$Site, levels = c("Cape Byron", "Evans Head", "North Solitary", "Diamond Head"))
# Create dataframe of inshore and offshore sites
sitesX <- data.frame(Site = c("Cape Byron", "Evans Head", "North Solitary", "Diamond Head"),
Longitude_Inshore = c(153.794, 153.637, 153.384, 152.944),
Longitude_Offshore <- c(154.1008, 153.9449, 153.6949, 153.2606),
Longitude_Inshore_8km = c(153.7224, 153.5652, 153.3115, 152.8702))
# #inshore locations (15 km from shore):
#  # CB - -28.632 , 153.794
#  # EH - -29 , 153.637
#  # NS - -30 , 153.384
#  # DH - -31.75, 152.944
# Jet colour pallete
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
library(ggplot2)
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10") + facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0,  100), oob = scales::squish) + facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0,  100), oob = scales::squish) + facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0,  100), oob = scales::squish) + facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0,  100)) + facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0.01,100)) + facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0.01,100), oob = scales::squish) + facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0.01,100), oob = scales::squish, labels = comma) + facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0.01,100), oob = scales::squish, labels = scales::comma) + facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0.01,100), oob = scales::squish, labels = c(0.01, 0.1,1,10,100)) +
facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0.01,2), oob = scales::squish, labels = c(0.01, 0.1,1,2)) +
facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0.1,2), oob = scales::squish, labels = c(0.1,1,2)) +
facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0.1,2), oob = scales::squish, labels = c(0.1,1,2)) +
facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0.1,2), oob = scales::squish) +
facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
ggsave("plots/Hovmoller plots inshore offshore chla.png", width = 21.5, height = 29, units = "cm", dpi = 600)
ggsave("plots/Hovmoller plots inshore offshore chla.pdf", width = 21.5, height = 29, units = "cm", dpi = 600)
ggsave("plots/Hovmoller plots inshore offshore chla.png", width = 21.5, height = 29, units = "cm", dpi = 600)
ggsave("plots/Hovmoller plots inshore offshore chla.pdf", width = 21.5, height = 29, units = "cm", dpi = 600)
PH <- tidync("Data/Chla_imos_download/IMOS_aggregation_20200324T025801Z.nc") %>%
hyper_filter(latitude = latitude > -33.32 & latitude < -33.52) %>%
hyper_filter(longitude = longitude < 154.15)
PH
# Sydney
PH <- tidync("Data/Chla_imos_download/IMOS_aggregation_20200324T025801Z.nc") %>%
hyper_filter(latitude = latitude < -33.32 & latitude > -33.52) %>%
hyper_filter(longitude = longitude < 154.15)
PH
PH_dat <- DH %>% hyper_tibble()
PH_dat <- PH %>% hyper_tibble()
PH_dat$date <- as.Date(PH_dat$time, origin = "1800-01-01")
PH_dat$DAY_OF_YEAR <- yday(PH_dat$date)
summary(PH_dat$DAY_OF_YEAR)
PH_data <- PH_dat %>% group_by(longitude, DAY_OF_YEAR) %>% summarise(CHL_A = mean(chl_oc3, na.rm = TRUE))
PH_data$Site <- "Port Hacking"
head(PH_data)
## Add in Port Hacking for context
# Combine sites
full_dat <- bind_rows(CB_data, EH_data, NS_data, DH_data, PH_data)
full_dat$Site <- factor(full_dat$Site, levels = c("Cape Byron", "Evans Head", "North Solitary", "Diamond Head", "Port Hacking"))
# Create dataframe of inshore and offshore sites
sitesX <- data.frame(Site = c("Cape Byron", "Evans Head", "North Solitary", "Diamond Head"),
Longitude_Inshore = c(153.794, 153.637, 153.384, 152.944),
Longitude_Offshore <- c(154.1008, 153.9449, 153.6949, 153.2606),
Longitude_Inshore_8km = c(153.7224, 153.5652, 153.3115, 152.8702))
# Jet colour pallete
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
library(ggplot2)
p1 <- ggplot(full_dat, aes(x = longitude, y = DAY_OF_YEAR, fill = CHL_A)) + geom_tile() + #coord_flip() +
scale_fill_gradientn(colors = jet.colors(7), trans = "log10",limits = c(0.1,2), oob = scales::squish) +
facet_wrap(~Site,  ncol = 1) + # , limits = c(18,27)
theme_bw() + scale_x_continuous(expand = c(0, 0)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore)) +
geom_vline(data = sitesX, aes(xintercept = Longitude_Offshore)) + geom_vline(data = sitesX, aes(xintercept = Longitude_Inshore_8km), lty =2) +
ylab("Day of the Year") + xlab("Longitude")
p1
hist(PH_data$CHL_A)
hist(PH_data$CHL_A, breaks = 30)
hist(PH_data$CHL_A, breaks = 900)
hist(PH_data$CHL_A, breaks = 900, xlim = c(0,1))
hist(PH_data$CHL_A, breaks = 900, xlim = c(0,10))
p1
ggsave("plots/Hovmoller plots inshore offshore chla with Port Hacking.png", width = 21.5, height = 29, units = "cm", dpi = 600)
ggsave("plots/Hovmoller plots inshore offshore chla with Port Hacking.pdf", width = 21.5, height = 29, units = "cm", dpi = 600)
library(tidyverse)
library(lubridate)
mydata <- read_csv("Data/NRS Zooplankton PH.csv")
### Load PH Velocity Data
vel_dat <- read_csv("Data/Velocity Timeseries/Port Hacking/IMOS_aggregation_20200330T024301Z.csv")
# Rotate coastline
vel_dat$U_shore = 0
vel_dat$V_shore = 0
rot_deg_angle= -24
vel_dat$U_shore = cos(rot_deg_angle*pi/180)*vel_dat$`UCUR (m/s)` + sin(rot_deg_angle*pi/180)*vel_dat$`VCUR (m/s)`
vel_dat$V_shore= sin(rot_deg_angle*pi/180)*vel_dat$`UCUR (m/s)` + cos(rot_deg_angle*pi/180)*vel_dat$`VCUR (m/s)`
head(vel_dat)
vel_dat$Date <- vel_dat$`TIME (UTC)`
vel_dat$Month <- month(vel_dat$Date)
vel_dat$Year <- year(vel_dat$Date)
sum_dat <- vel_dat %>% group_by(Month) %>% summarise(Velocity = mean(V_shore*-1), SD = sd(V_shore), n = n(), SE = SD/sqrt(n))
sum_dat
pV <- ggplot(sum_dat, aes(x = Month, y = Velocity)) + geom_line() +
scale_x_continuous(breaks = seq(1,12)) + theme_classic() +
geom_errorbar(aes(ymin=Velocity-SE, ymax=Velocity+SE), width=.2, show.legend = FALSE)
pV
# To match plankton to velocity
Year_dat <- vel_dat %>% group_by(Month, Year) %>% summarise(Velocity = mean(V_shore*-1), SD = sd(V_shore), n = n(), SE = SD/sqrt(n))
Year_dat
full_dat <- full_join(Year_dat, mydata, by = c("Month", "Year"))
plot(log10(full_dat$ZoopAbundance_m3), full_dat$Velocity)
ggplot(full_dat, aes(x = Velocity, y = log10(ZoopAbundance_m3))) + geom_point() +
geom_smooth(method = "lm")
ggplot(full_dat, aes(x = Velocity, y = log10(ZoopAbundance_m3))) + geom_point() +
geom_smooth(method = "lm") + theme_classic()
ggplot(full_dat, aes(x = Velocity, y = log10(ZoopAbundance_m3))) + geom_point() +
geom_smooth(method = "lm") + theme_classic() +xlab("Southward Alongshore Velocity (m/s)")
ggsave("plots/velocity plankton mean monthly.png", width = 21, height = 14.8, units = "cm", dpi = 600)
ggsave("plots/velocity plankton mean monthly.pdf", width = 21, height = 14.8, units = "cm", dpi = 600)
source("D:/IMOS Data/IMOS_Toolbox/fIMOS_MatchMODIS.R")
source("D:/IMOS Data/IMOS_Toolbox/fIMOS_MatchAltimetry.R")
mydata <- mydata %>%
rename(Date = SampleDateLocal)
dat <- fIMOS_MatchAltimetry(mydata, res_spat)
ggplot(dat, aes(x = VCUR, y = log10(ZoopAbundance_m3))) + geom_point() +
geom_smooth(method = "lm")
# Rotate coastline
dat$U_shore = 0
dat$V_shore = 0
rot_deg_angle= -24
dat$U_shore = cos(rot_deg_angle*pi/180)*dat$UCUR + sin(rot_deg_angle*pi/180)*dat$VCUR
dat$V_shore= sin(rot_deg_angle*pi/180)*dat$UCUR + cos(rot_deg_angle*pi/180)*dat$VCUR
ggplot(dat, aes(x = V_shore, y = log10(ZoopAbundance_m3))) + geom_point() +
geom_smooth(method = "lm")
ggsave("plots/velocity plankton daily Port Hacking.png", width = 21, height = 14.8, units = "cm", dpi = 600)
ggsave("plots/velocity plankton daily Port Hacking.pdf", width = 21, height = 14.8, units = "cm", dpi = 600)
write.csv("data/Port Hacking Zooplankton with velocity.csv", row.names = F)
write.csv(dat, "data/Port Hacking Zooplankton with velocity.csv", row.names = F)
# but diversity seems to increase with southward flow
ggplot(dat, aes(x = V_shore, y = ShannonCopepodDiversity)) + geom_point() +
geom_smooth(method = "lm")
# but diversity seems to increase with southward flow
ggplot(dat, aes(x = V_shore, y = ShannonCopepodDiversity)) + geom_point() +
geom_smooth(method = "lm") + theme_classic()
# but diversity seems to increase with southward flow
ggplot(dat, aes(x = V_shore, y = ShannonCopepodDiversity)) + geom_point() +
geom_smooth(method = "lm") + theme_classic()
ggsave("plots/velocity plankton daily Port Hacking diversity.png", width = 21, height = 14.8, units = "cm", dpi = 600)
ggsave("plots/velocity plankton daily Port Hacking diversity.pdf", width = 21, height = 14.8, units = "cm", dpi = 600)
