mydata$Distance_Coast = 0
for (i in 1:nrow(mydata)){
if (mydata$site[i] == "CapeByron") {
mydata$Distance_Coast[i] = distm(c(153.58, -28.6), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "DiamondHead") {
mydata$Distance_Coast[i] = distm(c(152.75, -31.8), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "EvansHead") {
mydata$Distance_Coast[i] = distm(c(153.48, -29.0), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "NorthSolitary") {
mydata$Distance_Coast[i] = distm(c(153.23, -30.0), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
}
### Get Bathymetry and add distance from coast
Bathy <- read.csv("Data/Transect Bathymetry.csv", header = T)
Bathy <- subset(Bathy, Bathymetry < -1 & Bathymetry >= -200)
Bathy$Distance_Coast = 0
for (i in 1:nrow(Bathy)){
if (Bathy$site[i] == "CapeByron") {
Bathy$Distance_Coast[i] = distm(c(153.58, -28.6), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "DiamondHead") {
Bathy$Distance_Coast[i] = distm(c(152.75, -31.8), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "EvansHead") {
Bathy$Distance_Coast[i] = distm(c(153.48, -29.0), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "NorthSolitary") {
Bathy$Distance_Coast[i] = distm(c(153.23, -30.0), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
}
hist(mydata$ParetoSlope)
View(mydata)
View(mydata)
dat2 <- mydata %>% filter(Depth >10)
# getting Bathymetry into Zooplankton file
library(akima)
library(ggplot2)
library(reshape2)
library(tidyverse)
#install.packages("ncdf4")
library(ncdf4) # package for netcdf manipulation
library(raster) # package for raster manipulation
library(rgdal) # package for geospatial analysis
mydata <- read_csv("Data/SS2004_SeaSoarData.csv")
str(mydata)
head(mydata)
mydata <- mydata %>%
mutate(site = case_when(site = str_detect(File,"SS0408_023") ~ "CapeByron",
site = str_detect(File,"SS0408_021") ~ "EvansHead",
site = str_detect(File,"SS0408_010") ~ "NorthSolitary",
site = str_detect(File,"SS0408_008") ~ "DiamondHead"),
site = as.factor(site))
### Get distance from shore
### Get distance from shore
library(geosphere)
mydata$Distance_Coast = 0
for (i in 1:nrow(mydata)){
if (mydata$site[i] == "CapeByron") {
mydata$Distance_Coast[i] = distm(c(153.58, -28.6), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "DiamondHead") {
mydata$Distance_Coast[i] = distm(c(152.75, -31.8), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "EvansHead") {
mydata$Distance_Coast[i] = distm(c(153.48, -29.0), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "NorthSolitary") {
mydata$Distance_Coast[i] = distm(c(153.23, -30.0), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
}
# Open and manipulate GEBCO Depth data
mydata <- nc_open("Data/GEBCO Data/GEBCO_2019_135.0_-20.0_160.0_-46.0.nc")
print(mydata)
# Get lat/Long - check dimensions
lon <- ncvar_get(mydata,"lon")
nlon <- dim(lon)
#head(lon)
lat <- ncvar_get(mydata,"lat")
nlat <- dim(lat)
#head(lat)
print(head(c(nlon,nlat)))
# Get variable
depth_array <- ncvar_get(mydata, "elevation")
dim(depth_array)
fillvalue <- ncatt_get(mydata, "elevation", "_FillValue")
fillvalue
nc_close(mydata)
# Replace dodgy with NA
depth_array[depth_array == fillvalue$value] <- NA
dimnames(depth_array)[[1]] <- lon
dimnames(depth_array)[[2]] <- lat
depth_array[depth_array > 0] <- NA
# check plot
r <- raster(t(depth_array), xmn=min(lon), xmx=max(lon), ymn=min(lat), ymx=max(lat),
crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
r <- flip(r, 2)
plot(r)
toolik_lon <- 148#.49795
toolik_lat <- -44#2.262567
toolik_series <- extract(r, SpatialPoints(cbind(toolik_lon,toolik_lat)), method='simple', na.rm=T)
toolik_series
str(mydata)
mydata <- read_csv("Data/SS2004_SeaSoarData.csv")
str(mydata)
head(mydata)
mydata <- mydata %>%
mutate(site = case_when(site = str_detect(File,"SS0408_023") ~ "CapeByron",
site = str_detect(File,"SS0408_021") ~ "EvansHead",
site = str_detect(File,"SS0408_010") ~ "NorthSolitary",
site = str_detect(File,"SS0408_008") ~ "DiamondHead"),
site = as.factor(site))
### Get distance from shore
### Get distance from shore
library(geosphere)
mydata$Distance_Coast = 0
for (i in 1:nrow(mydata)){
if (mydata$site[i] == "CapeByron") {
mydata$Distance_Coast[i] = distm(c(153.58, -28.6), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "DiamondHead") {
mydata$Distance_Coast[i] = distm(c(152.75, -31.8), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "EvansHead") {
mydata$Distance_Coast[i] = distm(c(153.48, -29.0), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "NorthSolitary") {
mydata$Distance_Coast[i] = distm(c(153.23, -30.0), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
}
zoo_dat <- mydata
str(zoo_data)
str(zoo_dat)
for (i in 1:nrow(zoo_dat)){
#Check Select date
r <- raster(t(depth_array), xmn=min(lon), xmx=max(lon), ymn=min(lat), ymx=max(lat),
crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
r <- flip(r, 2)
point_lon <- zoo_dat$Lon[i]
point_lat <- zoo_dat$Lat[i]
toolik_series <- extract(r, SpatialPoints(cbind(point_lon,point_lat)), method='simple', na.rm=T)
zoo_dat$Bathy[i] <- toolik_series
}
zoo_dat$Bathy <- 0
zoo_dat$Bathy <- NA
zoo_dat$Bathy <- NA
pb <- txtProgressBar(min = 0, max = length(zoo_dat$Lat), style = 3)
for (i in 1:nrow(zoo_dat)){
#Check Select date
r <- raster(t(depth_array), xmn=min(lon), xmx=max(lon), ymn=min(lat), ymx=max(lat),
crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
r <- flip(r, 2)
point_lon <- zoo_dat$Lon[i]
point_lat <- zoo_dat$Lat[i]
toolik_series <- extract(r, SpatialPoints(cbind(point_lon,point_lat)), method='simple', na.rm=T)
zoo_dat$Bathy[i] <- toolik_series
setTxtProgressBar(pb, i)
}
hist(zoo_dat$Bathy)
zoo_dat$Bathy <- NA # initialise the column for Bathymetry
pb <- pbarETA::txtProgressBar(min = 0, max = length(zoo_dat$Lat), style = 3)
for (i in 1:nrow(zoo_dat)){
#Check Select date
r <- raster(t(depth_array), xmn=min(lon), xmx=max(lon), ymn=min(lat), ymx=max(lat),
crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
r <- flip(r, 2)
point_lon <- zoo_dat$Lon[i]
point_lat <- zoo_dat$Lat[i]
toolik_series <- extract(r, SpatialPoints(cbind(point_lon,point_lat)), method='simple', na.rm=T)
zoo_dat$Bathy[i] <- toolik_series
setTxtProgressBar(pb, i)
}
hist(zoo_dat$Bathy)
zoo_dat$Bathy <- NA # initialise the column for Bathymetry
pb <- pbarETA::txtProgressBar(min = 0, max = length(zoo_dat$Lat), style = 3)
r <- raster(t(depth_array), xmn=min(lon), xmx=max(lon), ymn=min(lat), ymx=max(lat),
crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
r <- flip(r, 2)
for (i in 1:nrow(zoo_dat)){
point_lon <- zoo_dat$Lon[i]
point_lat <- zoo_dat$Lat[i]
toolik_series <- extract(r, SpatialPoints(cbind(point_lon,point_lat)), method='simple', na.rm=T)
zoo_dat$Bathy[i] <- toolik_series
setTxtProgressBar(pb, i)
}
hist(zoo_dat$Bathy)
### Stop
write.csv(c_dat, file = "Data/SS2004_SeaSoarData_with_GEBCO.csv", row.names = FALSE)
### Stop
write.csv(zoo_dat, file = "Data/SS2004_SeaSoarData_with_GEBCO.csv", row.names = FALSE)
#install.packages("akima")
library(akima)
library(ggplot2)
library(reshape2)
library(tidyverse)
mydata <- read_csv("Data/SS2004_SeaSoarData_with_GEBCO.csv")
str(mydata)
head(mydata)
mydata <- mydata %>%
mutate(site = case_when(site = str_detect(File,"SS0408_023") ~ "CapeByron",
site = str_detect(File,"SS0408_021") ~ "EvansHead",
site = str_detect(File,"SS0408_010") ~ "NorthSolitary",
site = str_detect(File,"SS0408_008") ~ "DiamondHead"),
site = as.factor(site))
### Get distance from shore
### Get distance from shore
library(geosphere)
mydata$Distance_Coast = 0
for (i in 1:nrow(mydata)){
if (mydata$site[i] == "CapeByron") {
mydata$Distance_Coast[i] = distm(c(153.58, -28.6), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "DiamondHead") {
mydata$Distance_Coast[i] = distm(c(152.75, -31.8), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "EvansHead") {
mydata$Distance_Coast[i] = distm(c(153.48, -29.0), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "NorthSolitary") {
mydata$Distance_Coast[i] = distm(c(153.23, -30.0), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
}
### Get Bathymetry and add distance from coast
Bathy <- read.csv("Data/Transect Bathymetry.csv", header = T)
Bathy <- subset(Bathy, Bathymetry < -1 & Bathymetry >= -200)
Bathy$Distance_Coast = 0
for (i in 1:nrow(Bathy)){
if (Bathy$site[i] == "CapeByron") {
Bathy$Distance_Coast[i] = distm(c(153.58, -28.6), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "DiamondHead") {
Bathy$Distance_Coast[i] = distm(c(152.75, -31.8), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "EvansHead") {
Bathy$Distance_Coast[i] = distm(c(153.48, -29.0), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "NorthSolitary") {
Bathy$Distance_Coast[i] = distm(c(153.23, -30.0), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
}
pB <- ggplot(dat2, aes(x = Bathymetry, y = Biomass)) + geom_point()
pB
pB <- ggplot(dat2, aes(x = Bathy, y = Biomass)) + geom_point()
pB
dat2 <- mydata %>% filter(Depth >10)
pB <- ggplot(dat2, aes(x = Bathy, y = Biomass)) + geom_point()
pB
dat2 <- mydata %>% filter(Depth >10 & Depth >51)
pB <- ggplot(dat2, aes(x = -Bathy, y = Biomass)) + geom_point()
pB
pB <- ggplot(dat2, aes(x = -Bathy, y = Biomass, col = site)) + geom_point()
pB
pB <- ggplot(dat2, aes(x = -Bathy, y = Biomass, col = site)) + geom_point() +
geom_smooth()
pB
pB <- ggplot(dat2, aes(x = -Bathy, y = Biomass, col = site)) + geom_point() +
geom_smooth(method = "lm")
pB
pB <- ggplot(dat2, aes(x = -Bathy, y = ParetoSlope, col = site)) + geom_point() +
geom_smooth(method = "lm")
pB
pB <- ggplot(dat2, aes(x = -Bathy, y = ParetoSlope, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site)
pB
pB <- ggplot(dat2, aes(x = -Bathy, y = Biomass, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site)
pB
pC <- ggplot(dat2, aes(x = -Bathy, y = GeoMn, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site)
pC
dat2$site <- factor(dat2$site, levels = c("CapeByron", "EvansHead", "NorthSolitary", "DiamondHead"))
pA <- ggplot(dat2, aes(x = -Bathy, y = Biomass, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site)
pA
pA <- ggplot(dat2, aes(x = -Bathy, y = Biomass, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + xlim(0, 300)
pA
pA <- ggplot(dat2, aes(x = -Bathy, y = Biomass, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + xlim(0, 300) + theme_classic()
pA
dat3 <- dat2
pA <- ggplot(dat2, aes(x = -Bathy, y = Biomass, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + xlim(0, 300) + theme_classic() +
geom_smooth(data = dat3, method = "lm", inherit.aes = F, aes(x = -Bathy, y = Biomass))
pA
fitA <- lm(Biomass ~ -Bathy , data = dat3)
summary(fitA)
coefs(fitA)
coef(fitA)
anova(fitA)
(fitA)
fitA <- lm(Biomass ~ Bathy , data = dat3)
(fitA)
summary(fitA)
fitA <- lm(Biomass ~ (-Bathy) , data = dat3)
summary(fitA)
dat3$Bathy <- dat2$Bathy * -1
fitA <- lm(Biomass ~ Bathy ,data = dat3)
fitA <- lm(Biomass ~ Bathy, data = dat3)
summary(fitA)
coefs <- coef(fitA)
pA <- ggplot(dat2, aes(x = -Bathy, y = Biomass, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + xlim(0, 300) + theme_classic() +
geom_abline(slope = coefs[2], intercept = coefs[1])
pA
pA <- ggplot(dat2, aes(x = -Bathy, y = Biomass, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + xlim(0, 300) + theme_classic() +
geom_abline(slope = coefs[2], intercept = coefs[1], lty = 2)
pA
fitB <- lm(ParetoSlope ~ Bathy, data = dat3)
summary(fitB)
coefsB <- coef(fitB)
pB <- ggplot(dat2, aes(x = -Bathy, y = ParetoSlope, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) +
geom_abline(slope = coefsB[2], intercept = coefsB[1], lty = 2)
pB
fitC <- lm(GeoMn ~ Bathy, data = dat3)
summary(fitC)
coefsC <- coef(fitC)
pC <- ggplot(dat2, aes(x = -Bathy, y = GeoMn, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) +  theme_classic() +
geom_abline(slope = coefsC[2], intercept = coefsC[1], lty = 2)
pC
pA <- ggplot(dat2, aes(x = -Bathy, y = Biomass)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + xlim(0, 300) + theme_classic() +
geom_abline(slope = coefs[2], intercept = coefs[1], lty = 2)
pA
ggsave("plots/zoop/Biomass by Bathymetry_300m.pdf", width=10, height=8)
ggsave("plots/zoop/Biomass by Bathymetry_300m.png", width=10, height=8, dpi = 600)
pA <- ggplot(dat2, aes(x = -Bathy, y = Biomass)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + theme_classic() +
geom_abline(slope = coefs[2], intercept = coefs[1], lty = 2)
pA
dat3 <- dat3 %>% filter(Bathy >= -300)
fitA <- lm(Biomass ~ Bathy, data = dat3)
summary(fitA)
coefs <- coef(fitA)
pA <- ggplot(dat2, aes(x = -Bathy, y = Biomass)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + xlim(0, 300) + theme_classic() +
geom_abline(slope = coefs[2], intercept = coefs[1], lty = 2)
pA
View(dat3)
pA <- ggplot(dat2, aes(x = Bathy, y = Biomass)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + xlim(0, 300) + theme_classic() +
geom_abline(slope = coefs[2], intercept = coefs[1], lty = 2)
pA
dat2 <- mydata %>% filter(Depth >10 & Depth >51)
dat2$site <- factor(dat2$site, levels = c("CapeByron", "EvansHead", "NorthSolitary", "DiamondHead"))
dat3 <- dat2
dat3$Bathy <- dat2$Bathy * -1
dat3 <- dat3 %>% filter(Bathy <= 300)
fitA <- lm(Biomass ~ Bathy, data = dat3)
summary(fitA)
coefs <- coef(fitA)
pA <- ggplot(dat2, aes(x = Bathy, y = Biomass)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + xlim(0, 300) + theme_classic() +
geom_abline(slope = coefs[2], intercept = coefs[1], lty = 2)
pA
pA <- ggplot(dat2, aes(x = -Bathy, y = Biomass)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + xlim(0, 300) + theme_classic() +
geom_abline(slope = coefs[2], intercept = coefs[1], lty = 2)
pA
dat3 <- dat2
dat3$Bathy <- dat2$Bathy * -1
fitA <- lm(Biomass ~ Bathy, data = dat3)
summary(fitA)
coefs <- coef(fitA)
pA <- ggplot(dat2, aes(x = -Bathy, y = Biomass)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) + theme_classic() +
geom_abline(slope = coefs[2], intercept = coefs[1], lty = 2)
pA
ggsave("plots/zoop/Biomass by Bathymetry.pdf", width=10, height=8)
ggsave("plots/zoop/Biomass by Bathymetry.png", width=10, height=8, dpi = 600)
fitB <- lm(ParetoSlope ~ Bathy, data = dat3)
summary(fitB)
coefsB <- coef(fitB)
pB <- ggplot(dat2, aes(x = -Bathy, y = ParetoSlope, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) +  theme_classic() +
geom_abline(slope = coefsB[2], intercept = coefsB[1], lty = 2)
pB
ggsave("plots/zoop/Slope by Bathymetry.pdf", width=10, height=8)
ggsave("plots/zoop/Slope by Bathymetry.png", width=10, height=8, dpi = 600)
fitC <- lm(GeoMn ~ Bathy, data = dat3)
summary(fitC)
coefsC <- coef(fitC)
pC <- ggplot(dat2, aes(x = -Bathy, y = GeoMn, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) +  theme_classic() +
geom_abline(slope = coefsC[2], intercept = coefsC[1], lty = 2)
pC
ggsave("plots/zoop/Size by Bathymetry.pdf", width=10, height=8)
ggsave("plots/zoop/Size by Bathymetry.png", width=10, height=8, dpi = 600)
### Geo_Mn Size #  done
### interpoLation and plots
for (j in sites){
mydata2 <- filter(mydata, site == j)
mydata2 <-  mydata2 %>% drop_na(GeoMn, Depth) %>% filter(GeoMn != Inf)
Bathy2 <- filter(Bathy, site == j)
#fit1 <- interp(x = mydata2$Distance_Coast, y = -mydata2$Depth, z = log10(mydata2$Biomass),
#               nx = 100, ny = 100)
fit1 <- with(mydata2, interp(x = Distance_Coast, y = -Depth, z = GeoMn*1000, nx = 100, ny = 100))
df <- melt(fit1$z, na.rm = TRUE)
names(df) <- c("x", "y", "GeoMn")
df$Distance_Coast <- fit1$x[df$x]
df$Depth <- fit1$y[df$y]
ggplot(data = df, mapping = aes(x = Distance_Coast, y = Depth, z = GeoMn)) +
geom_tile(aes(fill = GeoMn)) +
geom_contour(colour = "white") + #, binwidth = 0.125
scale_fill_distiller(palette = "Spectral", direction = -1, # "YlOrRd"
limits = c(min(mydata$GeoMn*1000, na.rm = TRUE), max(mydata$GeoMn*1000, na.rm = TRUE))) +
geom_line(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth), alpha = 0.5) +
geom_point(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth), alpha = 0.5) +
geom_ribbon(data= Bathy2, aes(x = Distance_Coast, ymax = Bathymetry, ymin=-200), inherit.aes = FALSE, fill = "grey60") +
ggtitle(paste0("Geometric Mean Size at ", j))
ggsave(paste0('plots/zoop/',j,"_GeoMn",'.pdf'),width = 10, height = 5)
ggsave(paste0('plots/zoop/',j,"_GeoMn",'.png'),width = 10, height = 5, dpi = 600)
}
#install.packages("akima")
library(akima)
library(ggplot2)
library(reshape2)
library(tidyverse)
mydata <- read_csv("Data/SS2004_SeaSoarData_with_GEBCO.csv")
str(mydata)
head(mydata)
mydata <- mydata %>%
mutate(site = case_when(site = str_detect(File,"SS0408_023") ~ "CapeByron",
site = str_detect(File,"SS0408_021") ~ "EvansHead",
site = str_detect(File,"SS0408_010") ~ "NorthSolitary",
site = str_detect(File,"SS0408_008") ~ "DiamondHead"),
site = as.factor(site))
### Get distance from shore
### Get distance from shore
library(geosphere)
mydata$Distance_Coast = 0
for (i in 1:nrow(mydata)){
if (mydata$site[i] == "CapeByron") {
mydata$Distance_Coast[i] = distm(c(153.58, -28.6), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "DiamondHead") {
mydata$Distance_Coast[i] = distm(c(152.75, -31.8), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "EvansHead") {
mydata$Distance_Coast[i] = distm(c(153.48, -29.0), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
if (mydata$site[i] == "NorthSolitary") {
mydata$Distance_Coast[i] = distm(c(153.23, -30.0), c(mydata$Lon[i], mydata$Lat[i]), fun = distHaversine)
}
}
### Get Bathymetry and add distance from coast
Bathy <- read.csv("Data/Transect Bathymetry.csv", header = T)
Bathy <- subset(Bathy, Bathymetry < -1 & Bathymetry >= -200)
Bathy$Distance_Coast = 0
for (i in 1:nrow(Bathy)){
if (Bathy$site[i] == "CapeByron") {
Bathy$Distance_Coast[i] = distm(c(153.58, -28.6), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "DiamondHead") {
Bathy$Distance_Coast[i] = distm(c(152.75, -31.8), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "EvansHead") {
Bathy$Distance_Coast[i] = distm(c(153.48, -29.0), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
if (Bathy$site[i] == "NorthSolitary") {
Bathy$Distance_Coast[i] = distm(c(153.23, -30.0), c(Bathy$Longitude[i], Bathy$Latitude[i]), fun = distHaversine)
}
}
# # variables to loop through
# vars = c("Temp", "Salt","GeoMn")# "NBSS.Slope",
# #sites to loop through
sites <- levels(mydata$site)
#
# # # Testing
# # for (i in vars){
# #
# #   p1 <- ggplot(mydata, aes(x = long3, y = -Depth, col = get(i))) + geom_point() +
# #     facet_wrap(~OPC_site, scales = "free_x") + theme_bw()
# #   print(p1)
# # }
### Geo_Mn Size #  done
### interpoLation and plots
for (j in sites){
mydata2 <- filter(mydata, site == j)
mydata2 <-  mydata2 %>% drop_na(GeoMn, Depth) %>% filter(GeoMn != Inf)
Bathy2 <- filter(Bathy, site == j)
#fit1 <- interp(x = mydata2$Distance_Coast, y = -mydata2$Depth, z = log10(mydata2$Biomass),
#               nx = 100, ny = 100)
fit1 <- with(mydata2, interp(x = Distance_Coast, y = -Depth, z = GeoMn*1000, nx = 100, ny = 100))
df <- melt(fit1$z, na.rm = TRUE)
names(df) <- c("x", "y", "GeoMn")
df$Distance_Coast <- fit1$x[df$x]
df$Depth <- fit1$y[df$y]
ggplot(data = df, mapping = aes(x = Distance_Coast, y = Depth, z = GeoMn)) +
geom_tile(aes(fill = GeoMn)) +
geom_contour(colour = "white") + #, binwidth = 0.125
scale_fill_distiller(palette = "Spectral", direction = -1, # "YlOrRd"
limits = c(min(mydata$GeoMn*1000, na.rm = TRUE), max(mydata$GeoMn*1000, na.rm = TRUE))) +
geom_line(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth), alpha = 0.5) +
geom_point(data = mydata2, mapping = aes(x = Distance_Coast, y = -Depth), alpha = 0.5) +
geom_ribbon(data= Bathy2, aes(x = Distance_Coast, ymax = Bathymetry, ymin=-200), inherit.aes = FALSE, fill = "grey60") +
ggtitle(paste0("Geometric Mean Size at ", j))
ggsave(paste0('plots/zoop/',j,"_GeoMn",'.pdf'),width = 10, height = 5)
ggsave(paste0('plots/zoop/',j,"_GeoMn",'.png'),width = 10, height = 5, dpi = 600)
}
pC <- ggplot(dat2, aes(x = -Bathy, y = GeoMn*1000, col = site)) + geom_point() +
geom_smooth(method = "lm") + facet_wrap(~site) +  theme_classic() +
geom_abline(slope = coefsC[2], intercept = coefsC[1], lty = 2)
pC
ggsave("plots/zoop/Size by Bathymetry.pdf", width=10, height=8)
ggsave("plots/zoop/Size by Bathymetry.png", width=10, height=8, dpi = 600)
hist(zoo_dat$Bathy)
